input to NSA shape: torch.Size([8192, 64])
output from NSA shape: torch.Size([8192, 64])
input to NSA shape: torch.Size([8192, 64])
output from NSA shape: torch.Size([8192, 64])
input to NSA shape: torch.Size([8192, 64])
output from NSA shape: torch.Size([8192, 64])
input to NSA shape: torch.Size([8192, 64])
output from NSA shape: torch.Size([8192, 64])
input to NSA shape: torch.Size([8192, 64])
output from NSA shape: torch.Size([8192, 64])
input to NSA shape: torch.Size([8192, 64])
output from NSA shape: torch.Size([8192, 64])
Traceback (most recent call last):
  File "/gpfs/home5/scur2687/erwin/experiments/train_shapenet.py", line 162, in <module>
    fit(config, model, optimizer, scheduler, train_loader, valid_loader, test_loader, 110, 160)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/training.py", line 212, in fit
    stat_dict = train_step(model, batch, optimizer, scheduler)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/training.py", line 65, in train_step
    stat_dict = model.training_step(batch)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 46, in training_step
    return self.step(batch, "train")
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 40, in step
    pred = self(**batch).squeeze(-1)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 31, in forward
    return self.pred_head(self.main_model(node_features, node_positions, **kwargs))
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
TypeError: linear(): argument 'input' (position 1) must be Tensor, not tuple
Traceback (most recent call last):
  File "/gpfs/home5/scur2687/erwin/experiments/train_shapenet.py", line 162, in <module>
    fit(config, model, optimizer, scheduler, train_loader, valid_loader, test_loader, 110, 160)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/training.py", line 212, in fit
    stat_dict = train_step(model, batch, optimizer, scheduler)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/training.py", line 65, in train_step
    stat_dict = model.training_step(batch)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 46, in training_step
    return self.step(batch, "train")
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 40, in step
    pred = self(**batch).squeeze(-1)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 31, in forward
    return self.pred_head(self.main_model(node_features, node_positions, **kwargs))
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/container.py", line 250, in forward
    input = module(input)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2687/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
TypeError: linear(): argument 'input' (position 1) must be Tensor, not tuple
